@page "/checkevents"
@attribute [Authorize(Roles = "Task.Create")]
@using fullstack.Typen
@using fullstack.Services
@inject OrganiserService OrganiserService

<PageTitle>CheckEvents</PageTitle>

<link href="css/ownStlyes.css" rel="stylesheet" />

<section class="events-section">
    <section class="searchbar-section">
        <input type="text" class="search-input" placeholder="Veranstaltung suchen..." @oninput="HandleInput" />
    </section>

    @foreach (Event evt in filteredEvents)
    {
        <section class="event-wrapper">
            <div class="header-section">
                <span class="event-name">@evt.Name</span>
                <div class="right-header-section">
                    <span>@evt.Date</span>
                    <span>@evt.Time</span>
                </div>
            </div>
            <div>
                <span>Teilnehmer:</span>
                <ul>
                    @foreach (string participant in evt.Participants)
                    {
                        <li>@participant</li>
                    }
                </ul>
            </div>
        </section>
    }
</section>

@code {
    private List<Event> events = new List<Event>();
    private List<Event> filteredEvents = new List<Event>();
    private string searchTerm = "";

    // Lädt alle Veranstaltungen beim Laden der Seite
    protected override async Task OnInitializedAsync()
    {
        try
        {
            IEnumerable<Event> result = await OrganiserService.GetAllEvents();
            events = result.ToList();
            filteredEvents = events;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Aktualisiert den Suchbegriff in "searchTerm" und ruft "FilterEvents" auf
    private void HandleInput(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterEvents();
    }

    // Filtert die Veranstaltungen nach dem Suchbegriff in "searchTerm"
    private void FilterEvents()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            // Wenn der Suchbegriff leer ist, zeige alle Veranstaltungen an
            filteredEvents = events;
        }
        else
        {
            // Ansonsten filtere die Veranstaltungen nach dem Suchbegriff
            filteredEvents = events.Where(e => e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}