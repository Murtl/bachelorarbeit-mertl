@page "/checkappliedevents"
@attribute [Authorize(Roles = "Task.Apply")]
@using fullstack.Typen
@using fullstack.Services
@inject ParticipantService ParticipantService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>CheckAppliedEvents</PageTitle>

<link href="css/ownStlyes.css" rel="stylesheet" />

<section class="events-section">
    <h4>Hier sind alle deine bevorstehenden Veranstaltungen zu sehen!</h4>

    @foreach (var evt in events)
    {
        <div class="event-wrapper">
            <section class="header-section">
                <span class="event-name">@evt.Name</span>
                <div class="right-header-section">
                    <span>@evt.Date</span>
                    <span>@evt.Time</span>
                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveAppliedEvent(evt.Id)">-</button>
                </div>
            </section>
            <section class="decribe-section">
                @evt.Description
            </section>
        </div>
    }
</section>

<ModalBootstrap @ref="@ModalBootstrap" Title="Hinweis">
    <div class="modal-wrapper">
        <div class="modal-row">
            @alertMessage
        </div>

        <div class="modal-row-button">
            <button class="btn btn-primary" @onclick="() => ModalBootstrap.Close()">Bestätigen</button>
        </div>
    </div>
</ModalBootstrap>

@code {
    private List<Event> events = new List<Event>();
    private string searchTerm = "";
    private string alertMessage = "";
    private ModalBootstrap ModalBootstrap { get; set; }

    // Lädt alle Veranstaltungen ohne die Teilnehmer beim Laden der Seite
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;

            // Hier kannst du auf die Benutzerinformationen zugreifen
            var userName = user.Identity.Name;

            var result = await ParticipantService.GetEventsByParticipant(userName);
            events = result.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Meldet den Benutzer für die Veranstaltung über den "ParticipantService" ab
    private async Task RemoveAppliedEvent(string eventId)
    {
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            var userName = user.Identity.Name;

            await ParticipantService.RemoveParticipant(eventId, userName);
            var result = await ParticipantService.GetEventsByParticipant(userName);
            events = result.ToList();
            alertMessage = "Sie haben sich erfolgreich von der Veranstaltung abgemeldet!";
            ModalBootstrap.Open();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}



